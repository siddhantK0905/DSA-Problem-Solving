
class Solution
{

	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    // code here
        int indegree[V] ={0};
        
        
        //Calculating indgree of all node
        for(int i=0; i<V; i++){
            
            for(auto it: adj[i]){
                indegree[it]++;
            }
        }
        
        //pushing all nodes whose indegree is 0
        queue<int>q;
        for(int i=0; i<V; i++){
            if(indegree[i] == 0){
                q.push(i);
            }
        }
        
        vector<int> ans;
        
        while(!q.empty()){
            int node = q.front();
            q.pop();
            ans.push_back(node);
            
            //decreasing indegree of adjanacay nodes of NODE by 1 
            for(auto it : adj[node]){
                indegree[it]--;
                //if any adjancy node's indegree becomes 0 then push into the queue 
                if(indegree[it] == 0){
                    q.push(it);
                }
            }
        }
        
        return ans;
	}
};
//Time Complexity -O(V+E)
//Space Complexity - O(N)
}
// } Driver Code Ends
